---
- hosts: webservers
  handlers:
    - name: install tomcat
      yum:
        name: tomcat
        state: latest
      listen: "install tomcat"
    - name: enable tomcat
      systemd:
        name: tomcat
        enabled: yes
        state: restarted
      listen: "enable tomcat"
    - name: stop tomcat
      systemd:
        name: tomcat
        state: stopped
      listen: "stop tomcat"
    - name: remove tomcat
      yum:
        name: tomcat
        state: absent
      listen: "remove tomcat"
  become: true
  serial:
  - 1
  - 2
  - 50%
  tasks:
  - name: To create a folder my_dir under tmp folder
    file:
      path: /tmp/my_dir/
      state: directory
  - name: To create a file in my_dir directory
    file:
      path: /tmp/my_dir/file_new.txt
      state: touch
  - name: To access the time file_new
    file:
      path: /tmp/my_dir/file_new.txt
      state: file
  - name: To copy file_new from local server(ansible control) to remote server(nodes), backing up the original if it differs from the copied version
    copy:
      src: ~/.ansible/file_local.txt
      dest: /tmp/my_dir/
      backup: yes
  - name: archiving multiple files
    archive:
      path:
        - /tmp/my_dir/file_local.txt
        - /tmp/my_dir/file_new.txt
      dest: /tmp/my_dir/filess.tar
      format: tar
 - name: unarchiving multiple files
    unarchive:
      src: /tmp/my_dir/filess.tar
      dest: /tmp/my_dir/
      remote_src: yes
  - name: ping pong
    ping: ~
  - name: playing with tomcat
    command: echo "This is tomcat at its best"
    notify: "remove tomcat"
  - name: gather facts from servers
    setup:
      filter: ansible_default_ipv4.address
  - name: to set selinux to different mode
    lineinfile:
      path: /etc/selinux/config
      regexp: '^SELINUX='
      line: SELINUX=disabled
  - name: debug demo
    debug:
      msg: System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}
  - name: install httpd
    yum:
      name: httpd
      state: latest
  - name: start httpd
    systemd:
      name: httpd
      state: started
  - name: httpd start status
    command: service httpd status
    register: httpd_status
  - name: httpd status output
    debug:
      #var: httpd_status
      msg:"{{httpd_status}}"
  - name: delegate installation of elinks to node2
    yum:
      name: elinks
      state: latest
    delegate_to: 54.226.105.28
  - name: demo of register module
    command: echo "Hello World!!"
    register: varone
  - name: usage of debug module
    debug: msg="{{varone.stdout}}"
  - name: creating users
    user:
      name: "{{ item }}"
      state: present
    with_items:
 - sam
     - john
     - bob
  - name: when demo
    stat:
      path: /home/ec2-user/abc.txt
    register: result
    delegate_to: 54.226.105.28
  - name: when debug if file exists
    debug:
      msg: "ansible when file exists e.g."
    when: result.stat.exists
  - name: when debug if file does not exists
    debug:
      msg: "ansible when file does not exists e.g."
    when: result.stat.exists == false
  - name: block, rescue and always with block failure
    block:
    - command: /bin/false
    rescue:
    - debug:
        msg: "I execute when block fails "
    always:
    - debug:
        msg: "I always execute"
    tags:
    - blockfail
    - failure
  - name: block, rescue and always with block execution checks
    block:
    - command: echo "block execution successful"
    rescue:
    - debug:
        msg: "I execute when block fails "
    always:
    - debug:
        msg: "I always execute-2"
    tags:
    - blockpass
    - success
  - name: ansible variables
    vars:
      hello:
        - world
        - asia
        - south america
        - north america
        - artic
        - antartica
- ocean
        - europe
        - africa
    debug:
      msg: "{{hello}}"
    tags:
      - vars
  - name: dictionary variables hash
    vars:
      webapp:
        designer: john
        developer: doe
        devops: shravan
        database: rose
        testing: jim
    debug:
      msg: "{{webapp['devops']}}"
    tags:
     - dict
  - name: jinja 2 filters demo with math power filter example
    debug:
      msg: "{{27|root(3)}}"
    tags:
      - filter
  - name: passing variables to ansible as list to from cli
    debug:
      msg: "{{ my_list }}"
    tags:
      - arglist
  - name: passing variables to ansible as dictionary to from cli
    debug:
      msg: "{{ my_dictionary }}"
    tags:
      - argdict
...